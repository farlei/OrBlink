#!/usr/bin/env python
"""
OrBlink by Hadley Rich <hads@nice.net.nz>

Copyright (c) <2013>, <hads@nice.net.nz>
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

import os, sys
import argparse
try:
  import webcolors
except ImportError:
  webcolors = None

from orblink import *

parser = argparse.ArgumentParser(description='OrBlink control. If --delay or --time are passed then will block until completion or forever.')
parser.add_argument('--color', help='Color to change to', action='append', default=[])
parser.add_argument('--delay', help='Delay between color change', action='append', default=[])
parser.add_argument('--time', help='Time between color change', action='append', default=[])
parser.add_argument('--store', help='Store the current color', action='store_true')
parser.add_argument('val', help='Set color, either named, in hex (#ffffff), or rgb (255 255 255)', nargs='*')
args = parser.parse_args()

orb = OrBlink(vendor_id=0x16c0, product_id=0x05df)
if not orb.valid:
  sys.stderr.write("Couldn't find OrBlink device.\n")
  sys.exit(1)

if args.store:
  orb.store()

if args.val:
  if len(args.val) == 1:
    color = args.val[0]
    if color.startswith('#'):
      try:
        r, g, b = hex_to_rgb(color)
      except (ValueError, TypeError):
        sys.stderr.write("Couldn't work out hex color.\n")
        sys.exit(2)
    else:
      if not webcolors:
        sys.stderr.write("Named colors require the 'webcolors' module.\n")
        sys.exit(2)
      try:
        r, g, b = webcolors.name_to_rgb(color)
      except ValueError:
        sys.stderr.write("Couldn't work out named color.\n")
        sys.exit(2)
    orb.set_color(r, g, b)
  elif len(args.val) == 3:
    try:
      r = int(sys.argv[1])
      g = int(sys.argv[2])
      b = int(sys.argv[3])
    except ValueError:
      sys.stderr.write("Couldn't work out RGB color.\n")
      sys.exit(2)
    orb.set_color(r, g, b)

if args.delay:
  import time
  i = 0
  for delay in args.delay:
    try:
      delay = float(delay)
    except ValueError:
      sys.stderr.write("Couldn't work out delay time.\n")
      sys.exit(2)

    try:
      color = args.color[i]
    except IndexError:
      try:
        color = args.color[-1]
      except IndexError:
        sys.stderr.write("No color to set.\n")
        sys.exit(2)
    try:
      r, g, b = hex_to_rgb(color)
    except (ValueError, TypeError):
      sys.stderr.write("Couldn't work out hex color.\n")
      sys.exit(2)

    time.sleep(delay)
    orb.set_color(r, g, b)
    i += 1

